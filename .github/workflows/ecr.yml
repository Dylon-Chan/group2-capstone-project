name: CICD for Group 2 Chat Application
run-name: ${{ github.actor }} is running CICD for Group 2 Chat Application


on:
  push:

# Define permissions for this workflow, which can be added at either the job or workflow level.      
permissions:
  id-token: write # This is required for requesting the JWT 
  contents: read
  security-events: write


jobs:
  unit-testing:
    runs-on: ubuntu-latest
    name: Unit Testing
    steps:
      - name: Checkout repo code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm install
      - name: Run unit testing
        run: npm test

  build-and-push-image-to-ecr:
    runs-on: ubuntu-latest
    # Make sure to run after the "get-aws-info" job.
    needs: get-aws-info
    name: Build and Push Docker Image to ECR
    steps:
      - name: Checkout repo code
        uses: actions/checkout@v3      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          # Syntax for accessing outputs from a reusable workflow is "needs.<reusable>.outputs.<output>".
          role-to-assume: ${{ needs.get-aws-info.outputs.role_to_assume }}
          aws-region: ${{ needs.get-aws-info.outputs.aws_region }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true
      - name: Create ECR repository using Terraform
        run: |
          cd ecr
          terraform init
          terraform apply -auto-approve
      - name: Build and push image to AWS ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: group2-chat-app
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy-to-ecs:
    runs-on: ubuntu-latest
    needs: [get-aws-info, build-and-push-image-to-ecr] # Make sure to run after the "get-aws-info" job.
    name: Deploy to ECS
    steps:
      - name: Checkout repo code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          # Syntax for accessing outputs from a reusable workflow is "needs.<reusable>.outputs.<output>".
          role-to-assume: ${{ needs.get-aws-info.outputs.role_to_assume }}
          aws-region: ${{ needs.get-aws-info.outputs.aws_region }}
      - name: Create AWS ECS cluster, task definition and service using Terraform
        run: |
          cd ecs
          terraform init
          terraform apply -auto-approve -target=aws_ecs_cluster.group2-chat-cluster -target=aws_ecs_task_definition.group2-chat-td -target=aws_security_group.ecs-sg -target=aws_ecs_service.group2-chat-service
      - name: Set up Terraform outputs
        id: tf-outputsgit
        working-directory: ./ecs
        run: |
          terraform apply -auto-approve
          echo "access_url=$(terraform output -json all_access_urls | jq -r 'to_entries[0].value')" >> $GITHUB_ENV
      - name: Echo Access URL
        run: echo "The Access URL is $access_url"


  
  # Define the "get-aws-info" job, which uses a reusable workflow defined in another file. 
  get-aws-info:
    uses: ./.github/workflows/get-aws-info.yml