name: CICD for Nodejs Application with Docker
run-name: ${{ github.actor }} is running CICD for Nodejs Application with Docker

on:
  push:
    branches: 
      - dev
      - feature-app
      - feature/*      
  workflow_dispatch:  

permissions:
  id-token: write

jobs:
  build-and-push-image-to-ecr:
    runs-on: ubuntu-latest
    # Make sure to run after the "job-get-aws-info-workflow" job.
    needs: job-get-aws-info-workflow
    name: Build and Push Docker Image to ECR
    steps:
     # A debug step to check if changes successful, if yes, remove it later. 
      - name: Debug step
        run: |
             echo "role to asume is ${{ needs.job-get-aws-info-workflow.outputs.role_to_assume }}"
             echo "aws region is ${{ needs.job-get-aws-info-workflow.outputs.aws_region }} "
      - name: Checkout repo code
        uses: actions/checkout@v3      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          # Syntax for accessing outputs from a reusable workflow is "needs.<reusable>.outputs.<output>".
          role-to-assume: ${{ needs.job-get-aws-info-workflow.outputs.role_to_assume }}
          aws-region: ${{ needs.job-get-aws-info-workflow.outputs.aws_region }}
          #role-to-assume: arn:aws:iam::255945442255:role/grp2-oidc
          #aws-region: ap-southeast-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Create ECR repository using Terraform
        run: |
          cd ecr
          terraform init
          terraform apply -auto-approve
      - name: Build and push image to AWS ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: group2-chat-app
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy-to-ecs:
    runs-on: ubuntu-latest
    needs: [job-get-aws-info-workflow, build-and-push-image-to-ecr] # Make sure to run after the "job-get-aws-info-workflow" job.
    name: Deploy to ECS
    steps:
      # A debug step to check if changes successful, if yes, remove it later. 
      - name: Debug step
        run: |
             echo "role to asume is ${{ needs.job-get-aws-info-workflow.outputs.role_to_assume }}"
             echo "aws region is ${{ needs.job-get-aws-info-workflow.outputs.aws_region }} "
      - name: Checkout repo code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          # Syntax for accessing outputs from a reusable workflow is "needs.<reusable>.outputs.<output>".
          role-to-assume: ${{ needs.job-get-aws-info-workflow.outputs.role_to_assume }}
          aws-region: ${{ needs.job-get-aws-info-workflow.outputs.aws_region }}
          #role-to-assume: arn:aws:iam::255945442255:role/grp2-oidc
          #aws-region: ap-southeast-1
      - name: Create AWS ECS cluster, task definition and service using Terraform
        run: |
          cd ecs
          terraform init
          terraform apply -auto-approve -target=aws_ecs_cluster.group2-chat-cluster -target=aws_ecs_task_definition.group2-chat-td -target=aws_security_group.ecs-sg -target=aws_ecs_service.group2-chat-service
      - name: Set up Terraform outputs
        id: tf-outputsgit
        working-directory: ./ecs
        run: |
          terraform apply -auto-approve
          echo "access_url=$(terraform output -json all_access_urls | jq -r 'to_entries[0].value')" >> $GITHUB_ENV
      - name: Echo Access URL
        run: echo "The Access URL is $access_url"

  # Define the "job-get-aws-info-workflow" job, which uses a reusable workflow defined in another file. 
  job-get-aws-info-workflow:
    uses: ./.github/workflows/reusable-get-aws-info-workflow.yml