name: CICD for Group 2 Chat Application - Production
run-name: ${{ github.actor }} is running CICD for Group 2 Chat Application - Production

# The workflow will be triggered on push events to the "prod" branch, which will be done when a pull request is merged into the "prod" branch.
on:
  push:
    branches: [ prod ]

# Define permissions for this workflow. It is a security measure to limit access.  
permissions:
  id-token: write # This is required for requesting the JWT
  actions: read # Permission to read actions.
  contents: read # Permission to read contents.

jobs:

  # The pre-deploy job just prints the type of event and branch that triggered the workflow
  pre-deploy:
    runs-on: ubuntu-latest
    steps:
      - run: echo "The job is automatically triggered by a ${{ github.event_name }} event on ${{ github.ref_name }} branch."

  # This job handles deployment to the production environment
  deploy-to-prod:
    runs-on: ubuntu-latest
    needs: [ pre-deploy ]   # This job depends on the completion of the 'pre-deploy' job.
    name: Deploy to Production
    env:
      environment: ${{ github.ref_name }}  # Specify the environment to deploy
    steps:
      - name: Checkout repo code
        uses: actions/checkout@v3

      # Set up AWS credentials by using OIDC authentication which are stored in the Github Actions Secrets
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.PROD_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR # Log in to Amazon ECR (Elastic Container Registry)
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true
      - name: Get ECR URL from Terraform  # Retrieve the ECR URL from Terraform output
        id: terraform-ecr
        working-directory: ./modules/ecr
        run: |
          terraform init
          terraform plan
          terraform apply -auto-approve
          echo "ecr_url=$(terraform output -json | jq -r .repository_url.value)" >> $GITHUB_OUTPUT
      - name: Create AWS ECS Fargate  # Use Terraform to set up AWS ECS with Fargate
        working-directory: ./environments/${{ env.environment }}
        id: terraform-ecs
        run: |
          terraform init
          terraform apply -auto-approve -var "image_name=${{ steps.terraform-ecr.outputs.ecr_url }}"
          echo "target_group_arn=$(terraform output -json | jq -r .target_group_arn.value)" >> $GITHUB_OUTPUT
          echo "route53_record_name=$(terraform output -json | jq -r .route53_record_name.value)" >> $GITHUB_OUTPUT

      # Continuously check the health status of the ALB Target Group until it is 'healthy' before publishing the Application URL
      - name: Check ALB Target Group Health Status
        run: |
          target_group_arn=${{ steps.terraform-ecs.outputs.target_group_arn }}
          while true; do
            health_status=$(aws elbv2 describe-target-health --target-group-arn $target_group_arn --query "TargetHealthDescriptions[0].TargetHealth.State" --output text)
            if [[ "$health_status" == "healthy" ]]; then
                    echo "Targets are healthy!"
                    break
                else
                    echo "Current status of target: $health_status. Waiting..."
                    sleep 10  # Check every 30 seconds
                fi
          done
      
      # Output the Application URL
      - name: Echo Application URL
        run: echo "The Application URL is http://${{ steps.terraform-ecs.outputs.route53_record_name }}"