name: CICD for Group 2 Chat Application
run-name: ${{ github.actor }} is running CICD for Group 2 Chat Application


on:
  push:
    branches-ignore: [ stage, prod ]
  workflow_dispatch:    

# Define permissions for this workflow, which can be added at either the job or workflow level.      
permissions:
  id-token: write # This is required for requesting the JWT
  actions: read
  contents: read
  security-events: write


jobs:
  pre-deploy:
    runs-on: ubuntu-latest
    steps:
      - run: echo "The job is automatically triggered by a ${{ github.event_name }} event."

  unit-testing:
    runs-on: ubuntu-latest
    needs: pre-deploy
    name: Unit Testing
    steps:
      - name: Checkout repo code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm install
      - name: Run unit tests
        run: npm test

  SNYK-Comprehensive-Security-Testing:
    needs: sca-tool-scan
    uses: ./.github/workflows/snyk-security.yml
    secrets: inherit

  sca-tool-scan:
    runs-on: ubuntu-latest
    needs: pre-deploy
    name: Snyk Open Source Security Scan
    steps:
      - name: Checkout repo code
        uses: actions/checkout@v3
      - name: install dependencies
        run: npm install
      - name: Run Snyk to scan for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true # To make sure that SARIF upload gets called even if Snyk fails
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: test --severity-threshold=high --sarif-file-output=snyk.sarif
      - name: Code scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

  # To add for SAST
  # sast-tool-scan:

  # To add docker image scan
  # build-and-scan-image:
    
  deploy:
    runs-on: ubuntu-latest
    needs: [ unit-testing, sca-tool-scan, SNYK-Comprehensive-Security-Testing, get-aws-info] # Update if other jobs are added
    name: Deploy to AWS
    env:
      environment: ${{ needs.get-aws-info.outputs.environment }}
    steps:
      - name: Checkout repo code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          # Syntax for accessing outputs from a reusable workflow is "needs.<reusable>.outputs.<output>".
          role-to-assume: ${{ needs.get-aws-info.outputs.role_to_assume }}
          aws-region: ${{ needs.get-aws-info.outputs.aws_region }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true
      - name: Create ECR repository using Terraform
        id: terraform-ecr
        working-directory: ./modules/ecr
        run: |
          terraform init
          terraform plan
          terraform apply -auto-approve
          echo "ecr_url=$(terraform output -json | jq -r .repository_url.value)" >> $GITHUB_OUTPUT
      - name: Push image to Amazon ECR
        id: push-image
        env:
          image_tag: latest
        run: |
          docker build -t ${{ steps.terraform-ecr.outputs.ecr_url }}:$image_tag .
          docker push ${{ steps.terraform-ecr.outputs.ecr_url }}:$image_tag
      - name: Create AWS ECS cluster, task definition and service using Terraform
        working-directory: ./environments/${{ env.environment }}
        run: |
          terraform init
          terraform apply -auto-approve -var "image_name=${{ steps.terraform-ecr.outputs.ecr_url }}" -target="aws_ecs_cluster.cluster" -target="aws_ecs_task_definition.task" -target="aws_security_group.ecs_sg" -target="aws_ecs_service.service"
      - name: Set up Terraform outputs # to get the access url on Github Actions
        id: tf-outputs
        working-directory: ./environments/${{ env.environment }}
        run: |
          terraform apply -auto-approve -var "image_name=${{ steps.terraform-ecr.outputs.ecr_url }}"
          echo "access_url=$(terraform output -json all_access_urls | jq -r 'to_entries[0].value')" >> $GITHUB_ENV
      - name: Echo Access URL
        run: echo "The Access URL is $access_url"

  # Add other jobs here if needed

  # Define the "get-aws-info" job, which uses a reusable workflow defined in another file. 
  get-aws-info:
    uses: ./.github/workflows/get-aws-info.yml