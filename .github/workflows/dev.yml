name: CICD for Group 2 Chat Application - Development
run-name: ${{ github.actor }} is running CICD for Group 2 Chat Application - Development


on:
  push:
    branches: [ dev, feature/* ]
  
# Define permissions for this workflow, which can be added at either the job or workflow level.      
permissions:
  id-token: write # This is required for requesting the JWT
  actions: read
  contents: read
  security-events: write


jobs:

  pre-deploy:
    runs-on: ubuntu-latest
    steps:
      - run: echo "The job is automatically triggered by a ${{ github.event_name }} event on ${{ github.ref_name }} branch."
  
  # Define the "get-aws-info" job, which uses a reusable workflow defined in another file. 
  get-aws-info:
    uses: ./.github/workflows/get-aws-info.yml

  unit-testing:
    runs-on: ubuntu-latest
    needs: pre-deploy
    name: Unit Testing
    steps:
      - name: Checkout repo code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm install
      - name: Run unit tests
        run: npm test

  #SNYK-Comprehensive-Security-scan is conducting a comprehensive set of security tests, including Snyk Code(SAST), Snyk Open Source(SCA), Snyk Infrastructure as Code, and Snyk Container tests         
  SNYK-Comprehensive-Security-scan:
    needs: pre-deploy
    uses: ./.github/workflows/snyk-security.yml
    secrets: inherit
   
  deploy:
    runs-on: ubuntu-latest
    outputs:
      access_url_output: ${{ steps.tf-outputs.outputs.access_url }}
    needs: [ pre-deploy, unit-testing, SNYK-Comprehensive-Security-scan, get-aws-info] # Update if other jobs are added
    name: Deploy to AWS
    env:
      environment: ${{ github.ref_name }}
    steps:
      - name: Checkout repo code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          # Syntax for accessing outputs from a reusable workflow is "needs.<reusable>.outputs.<output>".
          role-to-assume: ${{ needs.get-aws-info.outputs.role_to_assume }}
          aws-region: ${{ needs.get-aws-info.outputs.aws_region }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true
      - name: Create ECR repository using Terraform
        id: terraform-ecr
        working-directory: ./modules/ecr
        run: |
          terraform init
          terraform plan
          terraform apply -auto-approve
          echo "ecr_url=$(terraform output -json | jq -r .repository_url.value)" >> $GITHUB_OUTPUT
      - name: Push image to Amazon ECR
        id: push-image
        env:
          image_tag: latest
        run: |
          docker build -t ${{ steps.terraform-ecr.outputs.ecr_url }}:$image_tag .
          docker push ${{ steps.terraform-ecr.outputs.ecr_url }}:$image_tag
      - name: Create AWS ECS cluster, task definition and service using Terraform
        #working-directory: ./environments/${{ env.environment }}
        working-directory: ./environments/dev
        run: |
          terraform init
          terraform apply -auto-approve -var "image_name=${{ steps.terraform-ecr.outputs.ecr_url }}" -target="aws_ecs_cluster.cluster" -target="aws_ecs_task_definition.task" -target="aws_security_group.ecs_sg" -target="aws_ecs_service.service"
      - name: Set up Terraform outputs # to get the access url on Github Actions
        id: tf-outputs
        working-directory: ./environments/${{ env.environment }}
        run: |
          terraform apply -auto-approve -var "image_name=${{ steps.terraform-ecr.outputs.ecr_url }}"
          echo "access_url=$(terraform output -json all_access_urls | jq -r 'to_entries[0].value')" >> $GITHUB_OUTPUT
      - name: Echo Access URL
        run: echo "The Access URL is ${{ steps.tf-outputs.outputs.access_url }}"

  # This GitHub Actions workflow job is named 'zap-scan' and is responsible for performing an OWASP ZAP Full Scan,
  # which is a Dynamic Application Security Testing (DAST) scan.
  zap-scan:
    # It runs on the 'ubuntu-latest' runner with necessary permissions granted for the scan.
    runs-on: ubuntu-latest
    permissions: write-all
    # This job depends on the successful completion of the 'deploy' job before it can run.
    needs: deploy
    # Name of the job, indicating it's an OWASP ZAP Full Scan.
    name: OWASP ZAP Full Scan
    steps:
      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          # The 'target' parameter specifies the URL of the deployed application to be scanned.
          target: ${{ needs.deploy.outputs.access_url_output }}

# Add other jobs here if needed